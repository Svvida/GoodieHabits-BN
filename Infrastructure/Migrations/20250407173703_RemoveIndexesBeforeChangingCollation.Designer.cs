// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250407173703_RemoveIndexesBeforeChangingCollation")]
    partial class RemoveIndexesBeforeChangingCollation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("Etc/UTC")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Badges", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MonthlyQuest_Days", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EndDay")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int>("StartDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("MonthlyQuest_Days", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastCompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextResetAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("QuestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Quests", (string)null);
                });

            modelBuilder.Entity("Domain.Models.QuestLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Quest_Labels", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Quest_QuestLabel", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int>("QuestLabelId")
                        .HasColumnType("int");

                    b.HasKey("QuestId", "QuestLabelId");

                    b.HasIndex("QuestLabelId");

                    b.ToTable("Quest_QuestLabel", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SeasonalQuest_Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("SeasonalQuest_Seasons", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<string>("Bio")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<int>("CompletedQuests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .UseCollation("Latin1_General_100_CI_AS_SC_UTF8");

                    b.Property<int>("TotalQuests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserProfile_Badge", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EarnedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserProfileId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserProfileId", "BadgeId")
                        .IsUnique();

                    b.ToTable("UserProfile_Badges", (string)null);
                });

            modelBuilder.Entity("Domain.Models.WeeklyQuest_Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("WeeklyQuest_Days", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MonthlyQuest_Days", b =>
                {
                    b.HasOne("Domain.Models.Quest", "Quest")
                        .WithOne("MonthlyQuest_Days")
                        .HasForeignKey("Domain.Models.MonthlyQuest_Days", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Domain.Models.Quest", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Quests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.QuestLabel", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Labels")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.Quest_QuestLabel", b =>
                {
                    b.HasOne("Domain.Models.Quest", "Quest")
                        .WithMany("Quest_QuestLabels")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.QuestLabel", "QuestLabel")
                        .WithMany("Quest_QuestLabels")
                        .HasForeignKey("QuestLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("QuestLabel");
                });

            modelBuilder.Entity("Domain.Models.SeasonalQuest_Season", b =>
                {
                    b.HasOne("Domain.Models.Quest", "Quest")
                        .WithOne("SeasonalQuest_Season")
                        .HasForeignKey("Domain.Models.SeasonalQuest_Season", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("Domain.Models.UserProfile", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.UserProfile_Badge", b =>
                {
                    b.HasOne("Domain.Models.Badge", "Badge")
                        .WithMany("UserProfile_Badges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserProfile", "UserProfile")
                        .WithMany("UserProfile_Badges")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Domain.Models.WeeklyQuest_Day", b =>
                {
                    b.HasOne("Domain.Models.Quest", "Quest")
                        .WithMany("WeeklyQuest_Days")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("Domain.Models.Badge", b =>
                {
                    b.Navigation("UserProfile_Badges");
                });

            modelBuilder.Entity("Domain.Models.Quest", b =>
                {
                    b.Navigation("MonthlyQuest_Days");

                    b.Navigation("Quest_QuestLabels");

                    b.Navigation("SeasonalQuest_Season");

                    b.Navigation("WeeklyQuest_Days");
                });

            modelBuilder.Entity("Domain.Models.QuestLabel", b =>
                {
                    b.Navigation("Quest_QuestLabels");
                });

            modelBuilder.Entity("Domain.Models.UserProfile", b =>
                {
                    b.Navigation("UserProfile_Badges");
                });
#pragma warning restore 612, 618
        }
    }
}
